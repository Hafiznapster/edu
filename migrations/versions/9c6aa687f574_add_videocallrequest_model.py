"""Add VideoCallRequest model

Revision ID: 9c6aa687f574
Revises: add_session_columns
Create Date: 2025-04-10 01:58:01.961265

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9c6aa687f574'
down_revision = 'add_session_columns'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the video_call_request table already exists
    inspector = sa.inspect(op.get_bind())
    tables = inspector.get_table_names()

    if 'video_call_request' not in tables:
        op.create_table('video_call_request',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_id', sa.Integer(), nullable=True),
        sa.Column('requester_id', sa.Integer(), nullable=True),
        sa.Column('recipient_id', sa.Integer(), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['recipient_id'], ['user.id'], ),
        sa.ForeignKeyConstraint(['requester_id'], ['user.id'], ),
        sa.ForeignKeyConstraint(['session_id'], ['session.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    # Skip dropping columns and constraints that might have been already removed
    # We'll handle this manually to avoid errors

    # Check if the columns exist before trying to drop them
    inspector = sa.inspect(op.get_bind())
    columns = [col['name'] for col in inspector.get_columns('session')]

    if 'mentee_id' in columns or 'mentor_id' in columns:
        with op.batch_alter_table('session', schema=None) as batch_op:
            # Get existing foreign keys
            fks = inspector.get_foreign_keys('session')

            # Drop foreign keys that reference mentee_id or mentor_id
            for fk in fks:
                if 'mentee_id' in fk['constrained_columns'] or 'mentor_id' in fk['constrained_columns']:
                    batch_op.drop_constraint(fk['name'], type_='foreignkey')

            # Now drop the columns
            if 'mentee_id' in columns:
                batch_op.drop_column('mentee_id')
            if 'mentor_id' in columns:
                batch_op.drop_column('mentor_id')

    # Check if the task table exists and if milestone_id column already exists
    tables = inspector.get_table_names()
    if 'task' in tables:
        task_columns = [col['name'] for col in inspector.get_columns('task')]
        if 'milestone_id' not in task_columns:
            with op.batch_alter_table('task', schema=None) as batch_op:
                batch_op.add_column(sa.Column('milestone_id', sa.Integer(), nullable=True))
                batch_op.create_foreign_key('fk_task_milestone', 'progress_milestone', ['milestone_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the video_call_request table
    op.drop_table('video_call_request')

    # Check if the task table exists
    inspector = sa.inspect(op.get_bind())
    tables = inspector.get_table_names()

    if 'task' in tables:
        task_columns = [col['name'] for col in inspector.get_columns('task')]
        if 'milestone_id' in task_columns:
            with op.batch_alter_table('task', schema=None) as batch_op:
                # Get foreign keys
                fks = inspector.get_foreign_keys('task')
                for fk in fks:
                    if 'milestone_id' in fk['constrained_columns']:
                        batch_op.drop_constraint(fk['name'], type_='foreignkey')

                # Drop the column
                batch_op.drop_column('milestone_id')

    # We'll skip adding back mentor_id and mentee_id to session table
    # as we've moved to the new relationship model with SessionParticipant
    # ### end Alembic commands ###
